{"title":"Front-End Training","githubRepo":"jonmak08/front-end-training","googleAnalytics":"UA-37033501-5","index":{"title":"Home","description":"Front-end training documents that will help and guide you to become familiar with all of Liferay's front-end.","content":" What is front-end? The front-end, also called \"client-side\", is everything that happens in the browser. It is everything the users sees and interacts with. Front-end developers use HTML, CSS, and JavaScript to code the website and web app designs created by web designers. The code they write runs inside the user’s browser (as opposed to a back-end developer, whose code runs on the web server). Think of it a little like this: the back-end developer is like the engineer who designs and creates the systems that make a city work (electricity, water and sewer, zoning, etc.), while the front-end developer is the one who lays out the streets and makes sure everything is connected properly so people can live their lives (a simplified analogy, but you get the rough idea). They are also in charge of making sure that there are no errors or bugs on the front-end, as well as making sure that the design appears as it is supposed to across various platforms and browsers. To help you get started, we have written some guides and tutorials that will cover the basis for what you need to know about this area of web development. You will become familiar with everything front-end in Liferay. Let's get started! ","srcFilePath":"src/pages/index.soy","id":"pages","location":"/./","url":"/./","children":{"blog":{"children":{"debugging-effectively":{"title":"Debugging effectively","description":"Tips for how to debug your JavaScript effectively.","date":"August 15, 2014","author":"Drew Brokke","layout":"blog","content":" {$page.description} Throughout the training, you will find yourself working with code that does not do what you want it to do, and you will wonder why. Instead of blankly staring at the code, hopefully these tips will the debugging process easier. Search for surrounding text Maybe you are looking for something around an error message (e.g. \"A user with that OpenID already exists.\") that is appearing in a portlet. Use Sublime Text to search for the error message string in Liferay's source code. Your search results should return several The underlying property name is a language key that matches this value, a-user-with-that-open-id-already-exists. Now search for this string within Liferay's source code and ignore all the results in the What causes a DuplicateOpenIdException to be thrown? Search for A similar technique can be used to locate the file in which a particular view of a portlet is being generated. Just look for a rare string and search for it using Sublime Text. Along the lines of the last point, if you see a call to a function and think the bug you're looking for is occurring in that function, search for the function definition. If you are looking at a function definition and know that the file with the bug in it must be using that function, search for all calls to the function. Sublime Text has a plugin WhoCalled Function Finder for this exact use case. Print output If you are debugging a JavaScript file and want to know the value of any variable or expression at any point in the code, use In a Outside a Java scriptlet in a Browser's JavaScript console Use the browser's JavaScript console to debug and test code. If you declare a JavaScript variable as a window variable within the Liferay's source code (e.g, Just be sure to remove all declarations of window variables before submitting your code for review. If this variable has a function available to it, say More generally, you can use the console to test your own snippets of JavaScript code before putting them in Liferay's source code. Again, don't be afraid to ask for help when you need to. ","srcFilePath":"src/pages/blog/debugging-effectively.md","id":"debugging-effectively","location":"/blog/debugging-effectively.html","url":"/blog/debugging-effectively.html"},"git-cherry-pick":{"title":"Git Cherry-pick","description":"Overview and Scenarios of the git cherry-pick command.","date":"April 17, 2018","author":"Johanna Tchon","layout":"blog","content":" {$page.description} Objective: Learn how to use the git cherry-pick command, primarily associated with backporting JIRA issues. Now that you are learning how to backport JIRA issues, that means that you have gotten some minimal experience with Git. If you have heard some horror stories about Git, you must have heard the term 'merge conflict'. And if you have not run into any merge conflicts yet, this is your lucky day! My hope is to give you a better understanding of why we use git cherry-pick when backporting JIRA tickets and to help you navigate through errors you will possibly encounter when using this command. What does it do? From what the command implies, it picks a commit(s) from another branch and applies those commit(s) to your current branch. _What does that look like?_ Both branches start off with a base of A** where the left side branches off with three commits **B, C**, and **D, in that order, and the right branch has one commit, E**. Say we want to *cherry-pick* the commits **B and D**, but not **C, from the left branch and patch them onto the right branch on top of commit *E*. git cherry-pick easily allows us to pick and choose specific commits that we want to apply to our local branch, rather than all (and unwanted) commits. How convenient! Why do we use it? In context of backporting JIRA tickets, say that you are backporting an issue (commit(s)) from Liferay's master branch to Liferay's 7.0.x branch. You have to apply each commit to check if the fixes work in Liferay's 7.0.x. This is when you use git cherry-pick for each of those commits. Note: Commit ID is a SHA-1 Hash alphanumeric code that can be either 40 characters long or 7 characters long. The 7-character hash is the shorthand version of the 40-character hash. A better question to ask is... _Why don't we directly apply the changes by copying and pasting the changes into our current branch?_ Copying and pasting manually can be a tedious task. If there are multiple files changed or files are deeply nested inside the repository, it can get very complicated and messy, especially tracking what changes have and have not been made yet. It can also be an easy way to create unintentional bugs. git cherry-pick automates this process and does this in a quick and clean way all in one shot. For backporting, git cherry-pick is ideal because it commits changes to your current branch with the same author and commit message as used in the original commit. If a Github User (hobbitfoLyfe) made a commit and you applied changes manually with your Github handle shortGandalf, this commit will be authored by you (shortGandalf) and not by hobbitfoLyfe. So if someone has questions about the bug fix commit, they will be asking you, shortGandalf, and you are going to have no idea because you did not fix the original bug. Let's leave the drama for the movies and out of backporting JIRA tickets... How do you use it? When you run the git cherry-pick command, it can go a few different ways (maybe more, but this is what I have experienced). The Dream: Do nothing ` $ git cherry-pick d67142e warning: inexact rename detection was skipped due to too many files. warning: you may want to set your merge.renamelimit variable to at least 9190 and retry the command. [LPS-78835-master 782f39d44b3f] LPS-74282 Uses node 8.4.0 Author: Chema Balsas Date: Thu Aug 31 10:16:00 2017 +0200 1 file changed, 5 insertions(+), 1 deletion(-) ` This is the ideal situation. This will fast-forward the commit because it has found the commit that you wanted to cherry-pick from another branch and it causes no merge conflicts. This means it will be committed automatically to your current branch. If you run git log, you will now see that this commit is now, a part of your log with the original author and commit message. Done! Yay! The Reality: Merge Conflict ` $ git cherry-pick 99daed2 error: could not apply 99daed2... commit hint: after resolving the conflicts, mark the corrected paths hint: with 'git add ' or 'git rm ' hint: and commit the result with 'git commit' ` If there is an issue with a cherry-pick, it is most likely caused by a merge conflict. This means that the changes cannot be automatically merged. You need to go to the files that were changed by the cherry-pick and it will show you something like this: ` 99daed2 My first paragraph. ` Note: Merge conflicts often occur because the change you are applying has been altered by other changes, so the base changes in the file you are trying to change are no longer the same. Between `","srcFilePath":"src/pages/blog/git-cherry-pick.md","id":"git-cherry-pick","location":"/blog/git-cherry-pick.html","url":"/blog/git-cherry-pick.html"},"git-for-dummies":{"title":"Git for Dummies","description":"Git for Dummies.","date":"October 2, 2013","author":"Pei-Jung Lan","layout":"blog","content":" Git can be incredibly confusing when you start using it. The Git guide has some great tips, but don't rely solely on it; feel free to look for Git tutorials on Google or YouTube; there are a lot of great beginner tips out there, and the faster you understand Git, the faster you can get up to speed with the rest of Liferay. It may take time, but it'll make sense eventually. Git Magic provides an introduction about Git; a basic understanding of what Git is and what it is useful for. Pro Git contains extensive documentation on how to use Git. First off, you're going to have to use the command line. There are other means of going about using Git, using GUI clients such as SmartGit, but the command line is usually (but not always) the most effective way to use Git. A lot of Git is just learning to understand what you're seeing on the command line. Some things to know Git is best described as a \"decentralized source control management system\". That means that instead of having one master source that everyone has to work with (it can be destroyed, shut down, corrupted, etc.) every user is given an independent copy of the master source code. They can make changes and then merge those changes back into the source repository (upstream). This main repository is called trunk. What makes Git unique is that it only records the changes (commits) made by individual users. So when a change is made, instead of having to upload thousands of files, whatever changes have been made are applied to the main repository, and the rest of the files are left untouched. It's like a painter adding onto a painting when he wants to make a change, as opposed to starting from scratch and making the change. For further reference, a great beginner video series is the AVA series on YouTube. It is incredibly simple, and made for absolute Git beginners, which most interns typically are. In addition, most of the Git commands you will need to use at Liferay can be found here. Overview of the Git workflow Initialize and setup a Git repository Create a local branch to work on and make changes to Add any new/modified changes that you want to include in the commit Commit often so it is easier to keep track of all your work Push local commits to the remote repository Submit a pull request Updating branches and repositories There are two ways to update your local branches to reflect upstream changes. The first is by using Just make sure you always create local branches when you need to make changes and never make changes to your local copies of upstream branches, or else using branch -f will make your changes disappear. The biggest thing to remember, if you are just starting out with Git is just to be careful and patient. Always make a new branch ( If you send code off to be approved, don't touch it - if you need to work on it again, you'll get it back, or receive an okay to work on it again, don't risk conflicting with changes that a supervisor might make and then send to you by changing stuff in your specific copy that could conflict with someone else's. Don't ever try to recreate changes someone else made that you don't have access to, ask them for a pull request or get your hands on it the right way. Git can have a high degree of complexity as a whole, but you can make your little slice of things pretty simple, so don't make it harder on yourself. Resolving a bug in Liferay This is a conceptual walk-through about how to use Git to resolve a bug found in Liferay Portal. It won't cover every specific command, but it will detail a process that should help you better understand what is going on in Git and how to use Git for a simple bug fix. Update our local copy of Liferay Portal to match Liferay Portal trunk (upstream on GitHub). This would ensure that all the changes that have recently been added to the trunk are reflected in your local copy (because you most likely won't want to be working off of an outdated version of portal). We would do this using a git pull. This would pull all the changes from Liferay's source code onto our personal machine. Make a new branch. This helps to preserve both the integrity of the master branch and the changes you've made to accomplish a specific task (just in case you need to refer to those changes in the future). For this example, we'll create a branch called BugFix9. All the changes we make will be made on this branch, but if all goes well, they will be merged into the master branch. Note: A good convention to follow is to include the ticket number in the branch name. For example, LPS-12345-bugFix. Checkout our new branch and make our changes Note: You'll likely make your changes in your bundle before making the changes to your branch in portal. Once our changes have been made, we would add them to our working tree, using Rebuild our changes with the bugfix to see if the fix really works (run Now that we've fixed our bug and tested everything. All our changes have been added (another word for this is staged), and we're ready to commit them. This means that we're going to add them to the source code of our current branch. We run Before we push our work to our origin, we need to update our local branch with upstream/master to make sure that all changes are compatible with the most recent changes on upstream/master.Occasionally, this update and merging process does not go smoothly. If we changed the same part of the same file differently in the two branches that we are merging together, Git won't be able to merge them. However, our changes will likely go through a reviewer (or two or three), so we'll push our branch to our our origin and then send a pull request to a reviewer. We would do this by sending our local branch to our remote origin repository using Finally, we submit a pull request to our reviewer. If our code looks good, it will get pushed into the remote upstream repository and become a part of the trunk. Note: When sending pull requests for bug fixes, another good convention to follow is to include the link to the JIRA ticket in the body section of the pull request. Congratulations! You have successful fixed a bug in Liferay's source code. Git shortcuts and tips Below are some helpful shortcuts for Git. If you haven't wrapped your mind around the basics of Git yet, you may want to study and use Git more before trying some of these shortcuts. .gitconfig In your ~* directory, you'll also find a file called *.gitconfig. Editing this file allows you to set more advanced options for Git. Here is a snippet of code from a sample .gitconfig file. [user] name = Your Name email = your.name@liferay.com [core] filemode = false # Make Sublime Text the default editor rather than Vim for operations such as interactive rebase editor = 'C:/program files/sublime text 2/sublime_text.exe' -w [push] # When you run git push origin, all local branches are automatically pushed to their corresponding remote branches default = matching Liferay provides a list of commonly used Git commands and alias in Liferay's Git Tool repository. Using the * operator When there are several files that you have changed and you only want to stage some of them for a commit, you can use Let's say that you run Changes not staged for commit:# modified: portal-web/docroot/html/portlet/bookmarks/css/main.css modified: portal-web/docroot/html/portlet/documentlibrarydisplay/search.jsp modified: portal-web/docroot/html/themes/classic/diffs/css/colorschemes/dark.css modified: portal-web/docroot/layouttpl/custom/12_1columns.tpl# If you only want to commit the changes to the Bookmarks and Document Library Display portlets, you can simply run Creating aliases One of the things we recommend you do to improve your Git workflow is creating a To get started, create a file called Let's say that you wanted to use the shorter string cm in place of commit. Add the following line in your alias cm=\"commit\" Now, you can use Another example of useful aliases is chaining successive commands together. If you wanted to checkout the master branch, update it with the remote upstream repository, and push these changes to your remote origin repository, you could create an alias in your alias updateMaster=\"git checkout master; git pull upstream master; git push origin master\" (You must close and re-open your Terminal/Git Bash for the changes to take effect). You can also use aliases to represent non-Git commands as well. If you wanted to navigate to a folder location without typing everything out, you could create an alias in your alias portal=\"cd ~/Desktop/Liferay/liferay-portal\" Now you can type portal in your Terminal/Git Bash instead of having to type out the entire path every time. For an example of many of the things you can do with a In fact, it may even be more beneficial to navigate the long way for a while before you start setting up super shortcuts. However, you'll eventually want to start using them, because they significantly improve your workflow, allowing you to spend less time on busy work (i.e. typing in unreasonably long commands) and more time creating and fixing things! Gitk If you would like to see the commit history for a particular branch or see exactly what lines or what files have been changed, run This brings up a Git GUI that will help you visualize where your branches are, what changes you have staged, and much more. SmartGit is an even more robust tool and it is particularly good for solving merge conflicts. Rebase interactively Interactive rebase is a very helpful feature of Git that gives you the opportunity to easily alter a series of commits by rearranging the order, editing the messages, or squashing commits together into a single commit. Run the following command in your Terminal/Git Bash. git rebase -i This will launch the text editor with a file listing the commits that will be rebased. If you wanted to only pick the last few commits in the current branch rather than the entire branch, use For example, to rebase the last two commits, run the following command in your Terminal/Git Bash. git rebase -i HEAD~2 The file, git-rebase-to, will open up in the text editor and looks like the following: pick 4a66600 Commit 1 pick 2566fcf Commit 2 Rebase 617640f..2566fcf onto 617640f Commands: p, pick = use commit r, reword = use commit, but edit the commit message e, edit = use commit, but stop for amending s, squash = use commit, but meld into previous commit f, fixup = like \"squash\", but discard this commit's log message x, exec = run command (the rest of the line) using shell These lines can be re-ordered; they are executed from top to bottom. If you remove a line here THAT COMMIT WILL BE LOST. However, if you remove everything, the rebase will be aborted. Note that empty commits are commented out Select what you want to do and proceed by saving and closing the file. Resolving merge conflicts with SmartGit A merging conflict occurs when we try to do a merge, rebase or cherry-pick operation while there are conflicting changes between two or more commits. If that happens, Git will pause the merging process for us to fix the problem. In order to resolve the conflicts, we need to go through all conflicted files one by one and modify them as needed. Below is a brief walk-through on how to use SmartGit's Conflict Solver Tool to resolve the conflicts. Open SmartGit Open the file with conflicts (Usually indicated as a file with an exclamation mark). This will open up a three-panel editor, Smart Git's Conflict Solver. The left panel shows what is new on the master branch. Usually these are the changes that we want to keep. The center panel is the current working branch. This is where we select the changes that we want and make any further modifications if needed. The right panel shows the changes we have made, the conflicted branch. Fix the conflicts and stage the changes. Staging the file marks it as resolved in Git. Continue the process for all the conflicted file until there are no more conflicts. Run Squashing/Merging Commits Find the commits you want to squash/merge by running the following command in your Terminal/Git Bash. git rebase -i HEAD~n To merge the newer commits into the previous commit, change the pick command before each commit to squash or *s*. pick 4a66600 Commit 1 squash 2566fcf Commit 2 Rebase 617640f..2566fcf onto 617640f Commands: p, pick = use commit r, reword = use commit, but edit the commit message e, edit = use commit, but stop for amending s, squash = use commit, but meld into previous commit f, fixup = like \"squash\", but discard this commit's log message x, exec = run command (the rest of the line) using shell These lines can be re-ordered; they are executed from top to bottom. If you remove a line here THAT COMMIT WILL BE LOST. However, if you remove everything, the rebase will be aborted. Note that empty commits are commented out Save and close the editor to begin Git's rebase. Git will pause the rebase again after the merge is done and open the editor with the commit messages from all the commits. Edit the message if needed, save and close the editor to resume the rebase. Splitting commits Find the commits you want to split by running the following command in your Terminal/Git Bash. git rebase -i HEAD~n Unstage the files by running the following command in your Terminal/Git Bash. git reset HEAD^ Add the files you want to stage for the commits and make commits. After you have made all the changes that you want, resume rebase by running the following command in your Terminal/Git Bash. git rebase --continue To learn more about interactive rebase, visit https://help.github.com/articles/about-git-rebase. pull-request script If you would like to be able to send pull requests from the command line rather than on GitHub.com, there are command line tools created by Liferay to do so. git-tools: A Python script to send and receive pull requests based on Liferay usernames. node-gh: A node script to send and receive pull requests, comment in JIRA, and create Gists. ","srcFilePath":"src/pages/blog/git-for-dummies.md","id":"git-for-dummies","location":"/blog/git-for-dummies.html","url":"/blog/git-for-dummies.html"},"keyboard-shortcuts-devtools":{"title":"Keyboard Shortcuts: DevTools","description":"Keyboard shortcuts to save time and extra clicks.","date":"August 22, 2013","author":"Adam Parower","layout":"blog","content":" {$page.description} The best way to learn keyboard shortcuts is to use them. There are plenty of lists and cheat sheets available online to help you learn them; therefore, the shortcuts listed here are merely some of the ones we found to be the most useful and/or obscure. Tip: Force yourself to use keyboard shortcuts. The faster you become at navigating around your computer, the more thought you will be able to devote to creating and fixing things. Programmers love to use keyboard shortcuts, so if you ever catch yourself thinking \"I wish there was a faster way to do this...\", there probably is. General Tips Liberate yourself from the right click when it comes to accomplishing simple tasks; tasks like cutting, copying, pasting, and many other things. Do not waste your time using the right click if you do not need to! Chrome DevTools Common shortcuts for Chrome DevTools. If you find yourself using Chrome to inspect and debug a page, use the following shortcuts to help. Opening DevTools | Description | Windows | OS X | |--- | --- | --- | | Open whatever panel you used last | F12 (Or Control + Shift + I) | Command + Option + I | | Open the Console panel | Control + Shift + J | Command + Option + J | | Open the Elements panel | Control + Shift + C | Command + Option + C | Global keyboard shorcuts The following keyboard shortcuts are available in most, if not all, DevTools panels. | Description | Windows | OS X | |--- | --- | --- | | Show Settings | F1 (Or ?) | Function + F1 (Or ?) | | Focus the next panel | Control + ] | Command + ] | | Focus the previous panel | Control + [ | Command + [ | | Switch back to whatever docking position you last used. If DevTools has been in its default position for the entire session, then this shortcut undocks DevTools into a separate window | Control + Shift + D | Command + Shift + D | | Toggle Device Mode | Control + Shift + M | Command + Shift + M | | Toggle Inspect Element Mode | Control + Shift + C | Command + Shift + C | | Open the Command Menu | Control + Shift + P | Command + Shift + P | | Toggle the Drawer | Escape | Escape | | Normal reload | F5 (Or Control + R) | Command + R | | Hard reload | Control + F5 (Or Control + Shift + R) | Command + Shift + R | | Search for text within the current panel. Not supported in the Audits, Application, and Security panels | Control + F | Command + F | | Opens the Search tab in the Drawer, which lets you search for text across all loaded resources | Control + Shift + F | Command + Option + F | | Open a file in the Sources panel | Control + O (Or Control + P) | Command + O (Or Command + P) | | Zoom in | Control + Shift + + | Command + Shift + + | | Zoom out | Control + - | Command + - | | Restore default zoom level | Control + 0 | Command + 0 | | Run snippet | Press Elements panel | Description | Windows | OS X | |--- | --- | --- | | Undo change | Control + Z | Command + Z | | Redo change | Control + Y | Command + Shift + Z | | Select the element above / below the currently-selected element | Up Arrow / Down Arrow | Up Arrow / Down Arrow | | Expand the currently-selected node. If the node is already expanded, this shortcut selects the element below it | Right Arrow | Right Arrow | | Collapse the currently-selected node. If the node is already collapsed, this shortcut selects the element above it | Left Arrow | Left Arrow | | Expand or collapse the currently-selected node and all of its children | Hold | Toggle Edit Attributes mode on the currently-selected element | Enter | Enter | | Select the next / previous attribute after entering Edit Attributes mode | Tab / Shift + Tab | Tab / Shift + Tab | | Hide the currently-selected element | H | H | | Toggle Edit as HTML mode on the currently-selected element | F2 | Function + F2 | Console panel | Description | Windows | OS X | |--- | --- | --- | | Accept autocomplete suggestion | Right Arrow (Or Tab) | Right Arrow (Or Tab) | | Reject autocomplete suggestion | Escape | Escape | | Get previous statement | Up Arrow | Up Arrow | | Get next statement | Down Arrow | Down Arrow | | Focus the Console | Control + \\ | Control + \\| | Clear the Console | Control + L | Command + K (Or Option + L) | | Force a multi-line entry. Note that DevTools should detect multi-line scenarios by default, so this shortcut is now usually unnecessary | Shift + Enter | Command + Return | | Execute command | Enter | Return | | Expand all sub-properties of an object that's been logged to the Console | Hold This has been adapted from https://developers.google.com/web/tools/chrome-devtools/shortcuts. ","srcFilePath":"src/pages/blog/keyboard-shortcuts-devtools.md","id":"keyboard-shortcuts-devtools","location":"/blog/keyboard-shortcuts-devtools.html","url":"/blog/keyboard-shortcuts-devtools.html"},"keyboard-shortcuts-os":{"title":"Keyboard Shortcuts: Operating System","description":"Keyboard shortcuts to save time and extra clicks.","date":"August 22, 2013","author":"Adam Parower","layout":"blog","content":" {$page.description} The best way to learn keyboard shortcuts is to use them. There are plenty of lists and cheat sheets available online to help you learn them; therefore, the shortcuts listed here are merely some of the ones we found to be the most useful and/or obscure. Tip: Force yourself to use keyboard shortcuts. The faster you become at navigating around your computer, the more thought you will be able to devote to creating and fixing things. Programmers love to use keyboard shortcuts, so if you ever catch yourself thinking \"I wish there was a faster way to do this...\", there probably is. General Tips Liberate yourself from the right click when it comes to accomplishing simple tasks; tasks like cutting, copying, pasting, and many other things. Do not waste your time using the right click if you do not need to! Windows If you are an intern like myself, you are most likely using a Windows 10 machine. | Shortcut | Description | |--- | --- | | Ctrl + X | Cut the selected item | | Ctrl + C (or Ctrl + Insert) | Copy the selected item | | Ctrl + V (or Shift + Insert) | Paste the selected item | | Ctrl + Z | Undo an action | | Alt + Tab | Switch between open apps | | Alt + F4 | Close the active item, or exit the active app | | Windows logo key + L | Lock your Computer | | Windows logo key + D | Display and hide the desktop | | F2 | Rename the selected item | | F3 | Search for a file or folder in File Explorer | | Alt + Esc | Cycle through items in the order in which they were opened | | Alt + Left arrow | Go back | | Alt + Right arrow | Go forward | | Alt + Page Up | Move up one screen | | Alt + Page Down | Move down one screen | | Ctrl + F4 | Close the active document (in apps that are full-screen and let you have multiple documents open at the same time) | | Ctrl + A | Select all items in a document or window | | Ctrl + D (or Delete) | Delete the selected item and move it to the Recycle Bin | | Ctrl + R (or F5) | Refresh the active window | | Ctrl + Y | Redo an action | | Ctrl + Right arrow | Move the cursor to the beginning of the next word | | Ctrl + Left arrow | Move the cursor to the beginning of the previous word | | Ctrl + Down arrow | Move the cursor to the beginning of the next paragraph | | Ctrl + Up arrow | Move the cursor to the beginning of the previous paragraph | | Ctrl + Alt + Tab | Use the arrow keys to switch between all open apps | | Ctrl + arrow key (to move to an item) + Spacebar | Select multiple individual items in a window or on the desktop | | Ctrl + Shift with an arrow key | Select a block of text | | Ctrl + Esc | Open Start | | Ctrl + Shift + Esc | Open Task Manager | | Shift + Delete | Delete the selected item without moving it to the Recycle Bin first | | Esc | Stop or leave the current task | You can find more shortcuts for Windows at https://support.microsoft.com/en-us/help/12445/windows-keyboard-shortcuts. OS X | Shortcut | Description | |--- | --- | | Command + X | Cut the selected item and copy it to the Clipboard. | | Command + C | Copy the selected item to the Clipboard. This also works for files in the Finder. | | Command + V | Paste the contents of the Clipboard into the current document or app. This also works for files in the Finder. | | Command + Z | Undo the previous command. | | Command + Shift + Z | Redo the previous command. | | Command + A | Select All items. | | Command + F | Find items in a document or open a Find window. | | Command + G | Find Again: Find the next occurrence of the item previously found. To find the previous occurrence, press | Command + H | Hide the windows of the front app. To view the front app but hide all other apps, press | Command + M | Minimize the front window to the Dock. To minimize all windows of the front app, press | Command + N | New: Open a new document or window. | | Command + O | Open the selected item, or open a dialog to select a file to open. | | Command + P | Print the current document. | | Command + S | Save the current document. | | Command + W | Close the front window. To close all windows of the app, press | Command + Q | Quit the app. | | Option + Command + Esc | Force Quit: Choose an app to force quit. Or press | Command–Space bar | Spotlight: Show or hide the Spotlight search field. To perform a Spotlight search from a Finder window, press | Space bar | Quick Look: Use Quick Look to preview the selected item. | Command + Tab | Switch apps: Switch to the next most recently used app among your open apps. | | Shift + Command + Tilde | Switch windows: Switch to the next most recently used window of the front app. | | Shift + Command + 3 | Screenshot: Take a screenshot of the entire screen. Learn more screenshot shortcuts. | | Command + Comma | Preferences: Open preferences for the front app. | You can find more shortcuts for OS X at https://support.apple.com/en-us/HT201236. ","srcFilePath":"src/pages/blog/keyboard-shortcuts-os.md","id":"keyboard-shortcuts-os","location":"/blog/keyboard-shortcuts-os.html","url":"/blog/keyboard-shortcuts-os.html"},"keyboard-shortcuts-sublime":{"title":"Keyboard Shortcuts: Sublime Text","description":"Keyboard shortcuts to save time and extra clicks.","date":"August 22, 2013","author":"Adam Parower","layout":"blog","content":" {$page.description} The best way to learn keyboard shortcuts is to use them. There are plenty of lists and cheat sheets available online to help you learn them; therefore, the shortcuts listed here are merely some of the ones we found to be the most useful and/or obscure. Tip: Force yourself to use keyboard shortcuts. The faster you become at navigating around your computer, the more thought you will be able to devote to creating and fixing things. Programmers love to use keyboard shortcuts, so if you ever catch yourself thinking \"I wish there was a faster way to do this...\", there probably is. General Tips Liberate yourself from the right click when it comes to accomplishing simple tasks; tasks like cutting, copying, pasting, and many other things. Do not waste your time using the right click if you do not need to! Sublime Text Common shortcuts for Sublime Text if you use that as your text editor of choice. System and Files | Description | Windows | OS X | |--- | --- | --- | | Open File | Ctrl + O | Command + O | | Save File | Ctrl + S | Command + S | | Close File File | Ctrl + W | Command + W | | Open Recently Closed File | Ctrl + Shift + T | Command + Shift + T | | Toggle Sidebar | Ctrl + K B | Command + K B | | Switch Project | Ctrl + Alt + P | Command + Ctrl + P | | Font Size | Ctrl + +/- | Command + +/- | | Command Pallette | Ctrl + Shift + P | Command + Shift + P | | Fullscreen | F11 | Command + Ctrl + F | | Distraction Free Fullscreen | Shift + F11 | Command + Ctrl + Shift + F | | Change Tab | Alt + Number | Command + Number | | Navigate Through Tabs | Ctrl + PageUp/Down | Command + Alt + Left/Right | Selections / Moving Around | Description | Windows | OS X | |--- | --- | --- | | Jump words / characters | Ctrl + Left/Right | Ctrl + Left/Right | | Moving around and selecting | Ctrl + Shift + Left/Right | Ctrl + Shift + Left/Right | | Add next occurrence to selection | Ctrl + D | Command + D | | Add scope to selection | Ctrl + Shift + Space | Command + Shift + Space | | Add all occurences to selection | Alt + F3 | Ctrl + Command + G | | Select contents inside parenthesis | Ctrl + Shift + M | Ctrl + Shift + M | | Expand selection to indentation | Ctrl + Shift + J | Command + Shift + J | | Expand selection to Tag | Ctrl + Shift + A | Command + Shift + A | | Go to closing / opening parenthesis | Ctrl + M | Ctrl + M | | Back to single selection | Escape | Escape | | Scroll to selection | Ctrl + K, Ctrl + C | Command + K, Command + C | | Draw selection with mouse | Middle Mouse Button | Middle Mouse Button | | Add to mouse selection | Ctrl | Command | | Subtract from mouse selection | Alt | Command + Shift | Find | Description | Windows | OS X | |--- | --- | --- | | Find | Ctrl + F | Command + F | | Find in files | Ctrl + Shift + F | Command + Shift + F | | Find and replace | Ctrl + H | Command + Alt + F | | Incremental search | Ctrl + I | Command + I | | Navigate through the search panel | Tab | Tab | | Close search | Escape | Escape | | Goto anything | Ctrl + P | Command + P | | Goto line number | Ctrl + G | Ctrl + G | | Goto symbol | Ctrl + R |Command + R | | Go to word | Ctrl + P + write | Command + P + write # | | Find next | Enter (Or F3) | Enter | | Find previous | Shift + Enter (Or F3) | Shift + Enter | | Find all | Alt + F3 | Ctrl + Command + G | Editing | Description | Windows | OS X | |--- | --- | --- | | Copy line / selection | Ctrl + C | Command + C | | Cut line / selection | Ctrl + X | Command + X | | Paste | Ctrl + V | Command + V | | Paste with indentation | Ctrl + Shift + V | Command + Shift + V | | Delete line | Ctrl + Shift + K | Ctrl + Shift + K | | Delete from cursor to end of line | Ctrl + K K | Command + K K | | Delete from cursor to beginning of line | Ctrl + K Backspace | Command + K Backspace | | Duplicate line / selection | Ctrl + Shift + D | Command + Shift + D | | Select line | Ctrl + L | Command + L | | Move line up/down | Ctrl + Shift + Up/Down | Command + Ctrl + Up/Down | | Insert line after | Ctrl + Enter | Command + Enter | | Insert line before | Ctrl + Shift + Enter | Command + Shift + Return | | Join next line end of the current line | Ctrl + J | Command + J | | Transpose (swap place of characters/words) | Ctrl + T | Ctrl + T | | Uppercase | Ctrl + K, Ctrl + U | Command + K, Command + U | | Lowercase | Ctrl + K, Ctrl + L | Command + K, Command + L | | Delete word forward | Ctrl + Del | Ctrl + Del | | Delete word backwards | Ctrl + Backspace | Ctrl + Backspace | | Close tag | Alt + . | Command + Alt + . | Multiple Cursors | Description | Windows | OS X | |--- | --- | --- | | Split selection into lines | Ctrl + Shift + L | Command + Shift + L | | Add new cursor | Ctrl + Alt + Up/Down | Ctrl + Shift + Up/Down | | Single cursor | Escape | Escape | This has been adapted from https://www.wdtutorials.com/cheatsheet/sublime-text/sublime-text. You also have the ability to customize key bindings as well. ","srcFilePath":"src/pages/blog/keyboard-shortcuts-sublime.md","id":"keyboard-shortcuts-sublime","location":"/blog/keyboard-shortcuts-sublime.html","url":"/blog/keyboard-shortcuts-sublime.html"},"searching-smartly":{"title":"Searching smartly","description":"Tips for how to search smarter and quicker.","date":"May 27, 2014","author":"Marc Lundgren","layout":"blog","content":" {$page.description} Much of the leg-work of what you'll be doing will involve a significant amount of searching - whether you are looking for a CSS class name, or a taglib attribute, or property value. Being able to search well is an invaluable asset for your experience and effectiveness while working at Liferay. When searching for things, don't get tunnel vision; it's going to happen, but try to fight it. Try to start by looking at the whole picture, and then systematically narrow your search down. If you find you've spent a few days trying to pinpoint a certain class, or a specific JavaScript method, you probably have tunnel vision; this may not always be the case, but it's highly likely you are missing something. If you are stuck, ask for help, whether it is Google, your coworker or even your manager. A lot of people have found what you're currently looking for so don't be afraid to ask for help. Choose good keywords or phrases. Searching the entire Liferay source code with a keyword that is too broad or common will return you hundreds of results. Use keywords that are likely to be unique for the situation you are looking for. Windows File Explorer Windows File Explorer is great if you need to track down a file or a folder, but it can be incredibly misleading when trying to find keywords, especially ones that are parts of long strings of text. Use Sublime Text for searching for anything that isn't obvious like a file or a folder. Sublime Text It may also be helpful to learn how to write regular expressions. Sublime Text uses the Perl Compatible Regular Expressions (PCRE) engine from the Boost library to power regular expressions in search panels. Read more about regarding Sublime Text's regular expression. ","srcFilePath":"src/pages/blog/searching-smartly.md","id":"searching-smartly","location":"/blog/searching-smartly.html","url":"/blog/searching-smartly.html"},"setup-mysql":{"title":"Setup MySQL","description":"How to use Liferay with a MySQL database.","date":"August 15, 2014","author":"Drew Brokke","layout":"blog","content":" {$page.description} When you work on bug fixes, you will sometimes see an environment specification (Tomcat 7.0.25 + MYSQL5.0. 6.1.x GIT ID: 6d6b8814da7c7295ed4cab8420e070793361f856) in the details section of a JIRA ticket. The second parameter tells what database is in use when the bug was discovered. When you initially setup Liferay you were using a non-production database called HSQL. HSQL will be sufficient for most of the tasks you do, but in case you need to interact with the database, you will need to use MySQL. This section shows you how to set up MySQL. Download and install MySQL at http://dev.mysql.com/downloads. You can set the root password as empty by leaving the root password field blank while setting up. Add the path to the MySQL bin folder to your environment PATH variable Open up our Terminal/Git Bash and type the following command. mysql -u root -p Enter the root password that you setup when configuring MySQL. If everything is set up correctly, you should see the following output in your Terminal/Git Bash. C:\\Windows\\system32mysql -u root -p Enter password: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 1 Server version: 5.6.14 MySQL Community Server (GPL) Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql Create a database called lportal by running the following command in your Terminal/Git Bash. mysql create database lportal; Check to see if you successfully created the database by running the following command in your Terminal/Git Bash. mysql show databases; +--------------------+ | Database | +--------------------+ | information_schema | | lportal | | mysql | | performance_schema | | sakila | | test | | world | +--------------------+ 7 rows in set (0.01 sec) Configure MySQL in your jdbc.default.driverClassName=com.mysql.jdbc.Driver jdbc.default.url=jdbc:mysql://localhost/lportal?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false jdbc.default.username= jdbc.default.password= You need to update the database name if you used a different name than lportal when you created your database. If you didn't specify a username when configuring MySQL, the username is \"root\" by default. Append the username after jdbc.default.username=. If you didn't specify a password when configuring MySQL, keep it blank, but if you did, then append the password after jdbc.default.password=. Save the INFO: Initializing Spring root WebApplicationContext INFO localhost-startStop-1 Determine dialect for MySQL 5 INFO localhost-startStop-1 Found dialect org.hibernate.dialect.MySQLDialect 10. Liferay portal is now running with a MySQL database! ","srcFilePath":"src/pages/blog/setup-mysql.md","id":"setup-mysql","location":"/blog/setup-mysql.html","url":"/blog/setup-mysql.html"},"setup-sublime-text":{"title":"Setting up Sublime Text","description":"Simple configurations for Sublime Text.","date":"March 10, 2014","author":"Micah Moegelin","layout":"blog","content":" {$page.description} Sublime Text has a ton of features that are indispensable for development. If you use this as your text editor of choice, here are some settings and plugins that will help you get started. User settings Customize your Sublime Text settings for a better development experience. Below is an example { \"boldfolderlabels\": true, // makes the sidebar more readable at a glance \"color_scheme\": \"Packages/Color Scheme - Default/Monokai.tmTheme\", \"defaultlineending\": \"unix\", // set the default line ending to Unix-style (Liferay only allows you to commit files with this type of ending) \"drawwhitespace\": \"all\", // show a dot every time there is a white-space character \"font_face\": \"Ubuntu Mono\", // requires some work, but changes the font to something nicer \"font_size\": 11, \"ignored_packages\": [ \"Vintage\" ], \"rulers\": [ 80 ], // show a vertical bar at a distance of 80 characters from the left margin \"tab_size\": 4, // set tabs to be the same width as 4 spaces \"translatetabsto_spaces\": true, // use spaces to indent rather than tab characters \"trimtrailingwhitespaceon_save\": true, // auto-delete trailing white space every time you save \"word_wrap\": true } Most of these settings are personal preference, but some of these will be helpful during your development. default_line_ending: Set your line endings to be unix draw_white_space: Display all white-space characters throughout a file. rulers: Set a vertical bar at 80 characters. When editing Liferay's Java files, 80 characters are the maximum number of characters per line. tab_size: Set a default tab size to keep code consistent throughout the file. The typical tab size is 4 spaces, although there are occasional exceptions. trim_trailing_white_space_on_save: Remove extra line breaks and white-space upon saving of a file. For a complete list of settings, go to Preferences, click on Settings, and then click on Default. You can override of these settings; just copy it into your user preferences file and change the value. Package Control Package Control makes it easy to download and install useful Sublime Text plugins. Exploration here is very valuable because there are a lot of things that you can find to make your life easier or just customize Sublime Text to your liking. More information about installing and using package control can be found at https://packagecontrol.io/. Alignment: Easy alignment of multiple selections and multi-line selections. BracketHighlighter: Bracket and tag highlighter for Sublime Text http://facelessuser.github.io/BracketHighlighter/ GitHubinator: Sublime Text plugin that shows selected text on remote GitHub or Bitbucket repo. GitGutter: A Sublime Text 2/3 plugin to see git diff in gutter ","srcFilePath":"src/pages/blog/setup-sublime-text.md","id":"setup-sublime-text","location":"/blog/setup-sublime-text.html","url":"/blog/setup-sublime-text.html"},"theme-creation":{"title":"Creating a theme","description":"Tips for theme creation.","date":"August 23, 2013","author":"Nathan Bugbee","layout":"blog","content":" {$page.description} Selecting a theme: Choose a theme that you can get excited about. Take the time to find one that is both challenging, but isn't over your head. This will make the whole theme building process more interesting and exciting for you. Follow the directions: Directions are laid out on the Liferay Developer Network. If there is an existing Liferay theme that has similar features to the theme you want to create, set that existing theme as the base theme for your the one that you are going to be creating. Note: You will, most likely, not be using Liferay IDE to create your theme, so follow the directions that correspond to using the terminal. Formatting Standards: Reference the standards used by the Liferay frontend source formatter as you create your source files. This will save you from making a lot of obvious mistakes. You will also want to review your code with these standards in mind before submitting it (i.e. sending a pull request) to your reviewer. CSS: Liferay uses Clay, SASS and Bourbon for its CSS. Familiarize yourself with these technologies after you have a general grasp on CSS. When writing your **Use DevTools: Use Devtools to fiddle with the CSS in your browser. It is much quicker than editing in the source files if you want to test simple changes or additions without waiting for the theme to redeploy. Restyle portlets: When you create your theme, you will likely need to restyle certain portlets (e.g. the login portlet or the search portlet). Each portlet has an unique ID or CSS class that you can use to specifically apply styles in your Layout Templates: Do not shy away from creating your own layouts. Don't try to simulate your desired layout using the Nested Portlets portlet. Creating your own layout is relatively simple, though it may be intimidating at first because you are required to work with an unfamiliar language (i.e. Freemarker). It may be helpful to think of Freemarker as HTML remixed and souped-up. Format your code as you write: When writing code, it is tempting to just get all the code written down, and then go back and format it later. If you can, avoid doing this. It requires a little more work up-front to keep your code neat as you go along, but it saves a ton of time in the long run. ","srcFilePath":"src/pages/blog/theme-creation.md","id":"theme-creation","location":"/blog/theme-creation.html","url":"/blog/theme-creation.html"},"using-git-bisect":{"title":"Using Git bisect","description":"How to use git bisect.","date":"August 15, 2014","author":"Drew Brokke","layout":"blog","content":" {$page.description} When a problem is discovered, it is not always clear what modification caused the regression. Sometimes it is easy to figure out, but in some cases, the only way to find out is by going back and testing each commit in the history of the file(s) to find out when the problem was introduced. Checking each commit individually can take a significant amount of time, that is why we use To start *You can test whether a commit works or not by switching to that commit with Start git bisect start Specify good working commit by running the following command in your Terminal/Git Bash. git bisect good Specify bad commit by running the following command in your Terminal/Git Bash. git bisect bad Git bisect switches the current HEAD to the middle commit between the specified good and bad commits. You then mark the current commit as either good or bad by running the following command in your Terminal/Git Bash. git bisect good # good commit git bisect bad # bad commit Continues the process until you reach the final commit. End your git bisect reset ","srcFilePath":"src/pages/blog/using-git-bisect.md","id":"using-git-bisect","location":"/blog/using-git-bisect.html","url":"/blog/using-git-bisect.html"}},"title":"Blog","description":"Tips and advice for making front-end easier.","type":"blog","weight":3,"content":" By ","srcFilePath":"src/pages/blog/index.soy","id":"blog","location":"/blog/","url":"/blog/","childIds":["git-cherry-pick","debugging-effectively","setup-mysql","using-git-bisect","searching-smartly","setup-sublime-text","git-for-dummies","theme-creation","keyboard-shortcuts-os","keyboard-shortcuts-devtools","keyboard-shortcuts-sublime"]},"guide":{"title":"Guides","description":"Learn how to use the various tools and code that is used on Liferay's front-end.","weight":1,"content":" Guides Start learning the basics of front-end technology and begin developing! Choose a Guide Each one provides the base knowledge to begin using Liferay's front-end code and tooling. ","srcFilePath":"src/pages/guide/index.soy","id":"guide","location":"/guide/","url":"/guide/","children":{"search":{"title":"Search","description":"Find what you're looking for in the guides.","hidden":true,"content":" Search Guides Search results for Guides. ","srcFilePath":"src/pages/guide/search.soy","id":"search","location":"/guide/search.html","url":"/guide/search.html"},"command-line":{"title":"Command Line","description":"Learn about the command line.","layout":"guide","icon":"command-line","weight":5,"content":" {$page.description} What is the command line? A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface, and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Codecademy's Learn the Command Line Ryans Tutorials Linux Tutorial Udacity's Linux Command Line Basics ","srcFilePath":"src/pages/guide/command-line/index.md","id":"command-line","location":"/guide/command-line/","url":"/guide/command-line/"},"css":{"title":"CSS","description":"Learn about CSS.","layout":"guide","icon":"pen","weight":3,"content":" {$page.description} What is CSS? CSS stands for Cascading Style Sheet. CSS defines the look and feel of HTML elements on a web page. CSS is a language of style rules that we use to apply styling to our HTML content, for example setting background colors and fonts, and laying out our content in multiple columns. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Codecademy's HTML & CSS Code School's Adventures in Web Animations Code School's Blasting Off with Bootstrap Code School's CSS Cross-Country MDN's Learn to style HTML using CSS w3school's CSS Tutorial Other resources Codecademy's CSS glossary Flexbox Playground Flexbox Zombies Game MDN's CSS reference w3school's CSS reference CSS Quiz After you have finished the tutorials, please take the CSS Quiz. Advanced Tutorials Once you have a good understanding of CSS, please review these advanced tutorials below. Code School's Assembling Sass Sass Basics ","srcFilePath":"src/pages/guide/css/index.md","id":"css","location":"/guide/css/","url":"/guide/css/"},"html":{"title":"HTML","description":"Learn about HTML.","layout":"guide","icon":"code-file","weight":2,"content":" {$page.description} What is HTML? HTML stands for H**yper **Text M**arkup **Language. HTML is not a programming language, it is a markup language. A markup language is a set of markup tags and the purpose of the tags are to describe page content. HTML is the markup language that we use to structure and give meaning to our web content, for example defining paragraphs, headings, and data tables, or embedding images and videos in the page. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Codecademy's HTML & CSS Codecademy's Learn HTML Code Schools' Front-end Foundations Code Schools' Front-end Formations Udacity's HTML and CSS Syntax w3school's HTML5 Tutorial Other resources Codecademy's HTML glossary MDN's HTML reference w3school's HTML reference HTML Quiz After you have finished the tutorials, please take the HTML Quiz. ","srcFilePath":"src/pages/guide/html/index.md","id":"html","location":"/guide/html/","url":"/guide/html/"},"developer-tools":{"title":"Developer Tools","description":"Learn about browser developer tools.","layout":"guide","icon":"gear","weight":6,"content":" {$page.description} What are the browser developer tools? Developer tools are a powerful suite of tools that range from inspecting currently-loaded HTML, CSS and JavaScript to showing which assets the page has requested and how long they took to load, that are included in every modern browser. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Code School's Discover DevTools MDN's What are browser developer tools? ","srcFilePath":"src/pages/guide/developer-tools/index.md","id":"developer-tools","location":"/guide/developer-tools/","url":"/guide/developer-tools/"},"git":{"children":{"commands":{"title":"Commands","description":"Frequently used commands in Git.","layout":"guide","weight":2,"content":" {$page.description} Stage changes Usage git add Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history. Manage branches Usage git branch This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository. Checkout changes Usage git checkout In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it’s a way to work on a particular line of development. Remove untracked changes Usage git clean Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files. Copy repository Usage git clone Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository. Commit changes Usage git commit Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users. Update message Usage git commit --amend Passing the --amend flag to git commit lets you amend the most recent commit. This is very useful when you forget to stage a file or omit important information from the commit message. Manage configuration Usage git config A convenient way to set configuration options for your Git installation. You’ll typically only need to use this immediately after installing Git on a new development machine. Download changes Usage git fetch Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project. Initialize a repository Usage git init Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn. View changes Usage git log Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots. Integrate changes Usage git merge A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again. Download and integrate changes Usage git pull Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update. Send changes Usage git push Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions. This is like svn commit, but it sends a series of commits instead of a single changeset. Move changes around Usage git rebase Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore. Move changes around advanced Usage git rebase -i The -i flag is used to begin an interactive rebasing session. This provides all the benefits of a normal rebase, but gives you the opportunity to add, edit, or delete commits along the way. View Git history Usage git reflog Git keeps track of updates to the tip of branches using a mechanism called reflog. This allows you to go back to changesets even though they are not referenced by any branch or tag. Manage remote connections Usage git remote A convenient tool for administering remote connections. Instead of passing the full URL to the fetch, pull, and push commands, it lets you use a more meaningful shortcut. Undo changes Usage git reset Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository. Undo commit Usage git revert Undoes a committed snapshot. When you discover a faulty commit, reverting is a safe and easy way to completely remove it from the code base. View current state Usage git status Displays the state of the working directory and the staged snapshot. You’ll want to run this in conjunction with git add and git commit to see exactly what’s being included in the next snapshot. ","srcFilePath":"src/pages/guide/git/commands.md","id":"commands","location":"/guide/git/commands.html","url":"/guide/git/commands.html"},"glossary":{"title":"Glossary","description":"Define the terminology used in Git.","layout":"guide","weight":1,"content":" {$page.description} Branch A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process discussed in Git Basics, the first module of this series. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in a fork in the history of the project. Centralized Workflow If your developers are already comfortable with Subversion, the Centralized Workflow lets you experience the benefits of Git without having to adapt to an entirely new process. It also serves as a friendly transition into more Git-oriented workflows. Feature Branch Workflow The Feature Branch Workflow builds on the Centralized Workflow by encapsulating new features into dedicated branches. This enables the use of pull requests as a means to discuss changes before they’re integrated into the official project. Forking Instead of using a single server-side repository to act as the “central” codebase, forking gives every developer a server-side repository. This means that each contributor has not one, but two Git repositories: a private local one and a public server-side one. HEAD Git’s way of referring to the current snapshot. Internally, the git checkout command simply updates the HEAD to point to either the specified branch or commit. When it points to a branch, Git doesn't complain, but when you check out a commit, it switches into a “detached HEAD” state. Hook A script that runs automatically every time a particular event occurs in a Git repository. Hooks let you customize Git’s internal behavior and trigger customizable actions at key points in the development life cycle. Master The default development branch. Whenever you create a Git repository, a branch named \"master\" is created, and becomes the active branch. Pull Request Pull requests are a feature that makes it easier for developers to collaborate using Bitbucket. They provide a user-friendly web interface for discussing proposed changes before integrating them into the official project. Repository A collection of commits, and branches and tags to identify commits. Tag A reference typically used to mark a particular point in the commit chain. In contrast to a head, a tag is not updated by the commit command. Version Control A system that records changes to a file or set of files over time so that you can recall specific versions later. Working Tree The tree of actual checked out files, normally containing the contents of the HEAD commit's tree and any local changes you've made but haven't yet committed. ","srcFilePath":"src/pages/guide/git/glossary.md","id":"glossary","location":"/guide/git/glossary.html","url":"/guide/git/glossary.html"}},"title":"Git","description":"Learn about Git.","layout":"guide","icon":"fork","weight":1,"content":" {$page.description} What is Git? Git is a distributed version control system. It allows groups of people to work on the same documents at the same time, and without interfering with someone else. Every Git working directory is a full-fledged repository with complete history and full revision tracking capabilities, not dependent on network access or a central server like once-popular version control system, CVS of SVN. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Code School's Git Codecademy's Learn Git Github.com's Try Git Learn Git Branching Team Treehouse's Introduction to Git Team Treehouse's Git Branches and Merging Visualizing Git Concepts with D3 Udacity's How to Use Git and GitHub Other resources Atlassian's Git Cheat Sheet Git's documentation Git's user manual GitHub.com How to Teach Git Pro Git ","srcFilePath":"src/pages/guide/git/index.md","id":"git","location":"/guide/git/","url":"/guide/git/","childIds":["glossary","commands"]},"javascript":{"title":"JavaScript","description":"Learn about JavaScript.","layout":"guide","icon":"balloon-topic","weight":4,"content":" {$page.description} What is JavaScript? JavaScript (JS) is the most popular scripting language in the world. It is the standard language used in web pages, but it is also widely used by desktop apps, mobile phone apps, and internet servers. JavaScript is a scripting language that enables you to create dynamically updating content, control multimedia, animate images, and much more. Every time a web page does more than just sit there and display static information for you to look at JavaScript is probably involved. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. w3school's JavaScript Tutorial Codecademy's JavaScript Codecademy's Learn JavaScript Code School's JavaSCript Road Trip Part 1 Code School's JavaScript Road Trip Part 2 Code School's JavaScript Road Trip Part 3 Code School's JavaScript Best Practices MDN's JavaScript Tutorial Udacity's Intro to JavaScript Other resources Codecademy's JavaScript glossary Codewars Practice Problems w3school's JavaScript and HTML DOM reference MDN's JavaScript reference JavaScript Quiz After you have finished the tutorials, please take the JavaScript Quiz. Advanced Tutorials Once you have a good understanding of JavaScript, please review these advanced tutorials below. Code School's ES2015: The Shape of JavaScript to Come ECMASCript 6 Tutorial Metal.js Tutorials Tutorial: Intro to React Redux Tutorial ","srcFilePath":"src/pages/guide/javascript/index.md","id":"javascript","location":"/guide/javascript/","url":"/guide/javascript/"},"web-design":{"title":"Web Design and Development","description":"Learn about web design and development.","layout":"guide","icon":"cloud","weight":7,"content":" {$page.description} What is web design? Web design is a process of conceptualizing, planning, and building a collection of electronic files that determine the layout, colors, text styles, structure, graphics, images, and use of interactive features that deliver pages to your site visitors. What is a website? A website is a collection of related web pages, including multimedia content, typically identified with a common domain name, and published on a web server. Online tutorials Make sure to carefully read and follow the instructions in the tutorials below. Code School's Fundamentals of Design Code School's The Elements of Web Design Code School's Journey Into Mobile Advanced Tutorials Once you have a good understanding of everything (HTML, CSS, JavaScript, etc), put it all together using these advanced tutorials below. w3school's How To - Build a Web Site ","srcFilePath":"src/pages/guide/web-design/index.md","id":"web-design","location":"/guide/web-design/","url":"/guide/web-design/"}},"childIds":["git","html","css","javascript","command-line","developer-tools","web-design","search"]},"updates":{"title":"Updates","description":"Check out what's new","updates":[{"version":"2.0.14","major":false,"features":[{"icon":"info","title":"Update links to guides","description":"Add/Update links to CSS and JavaScript guides"}]},{"version":"2.0.13","major":false,"features":[{"icon":"info","title":"Add Linux instructions","description":"Add Linux instructions to tutorials"}]},{"version":"2.0.12","major":false,"features":[{"icon":"info","title":"Update broken guide links","description":"Update and remove broken guide links"}]},{"version":"2.0.11","major":false,"features":[{"icon":"info","title":"Update USER_NAME typo","description":"Update configuration files for USER_NAME typo"}]},{"version":"2.0.10","major":false,"features":[{"icon":"info","title":"Format markdown file","description":"Format and standardize markdown file"}]},{"version":"2.0.9","major":false,"features":[{"icon":"info","title":"Add instructions for setting environment variables","description":"Add instructions to setup JAVA_HOME and PATH environment variables on OS X in 'Setting up your environment'"}]},{"version":"2.0.8","major":false,"features":[{"icon":"info","title":"Add more links to guides","description":"Add new links to Git and JavaScript guides"}]},{"version":"2.0.7","major":false,"features":[{"icon":"info","title":"Remove extra word","description":"Remove extra word in git cherry-pick blog"}]},{"version":"2.0.6","major":false,"features":[{"icon":"info","title":"Add git cherry-pick blog","description":"Add git cherry-pick blog"}]},{"version":"2.0.5","major":false,"features":[{"icon":"info","title":"Update typo","description":"Update typo in 'Setting up Git'; Update typo in 'Setting you your environment'"}]},{"version":"2.0.4","major":false,"features":[{"icon":"info","title":"Update typo","description":"Update typo in 'Setting up your environment'"}]},{"version":"2.0.3","major":false,"features":[{"icon":"info","title":"Update properties file","description":"Update properties file in tutorials"}]},{"version":"2.0.2","major":false,"features":[{"icon":"info","title":"Update Liferay compatibility","description":"Update Liferay supported application servers and databases"}]},{"version":"2.0.1","major":false,"features":[{"icon":"info","title":"Update homepage link to tutorials","description":"Update broken link on homepage to tutorials"}]},{"version":"2.0.0","major":true,"features":[{"icon":"balloon-topic","title":"Update to electric@3.0.4","description":"Update website to use electric@3.0.4; Rename website to Front-End Training; Rename tutorials section to guides; Reverse order of updates;"}]},{"version":"1.1.3","major":false,"features":[{"icon":"info","title":"Update homepage link to tutorials","description":"Update broken link on homepage to tutorials"}]},{"version":"1.1.2","major":false,"features":[{"icon":"info","title":"Update CSS files in theme creation blog","description":"Fix custom CSS file and file path in Theme Creation blog."}]},{"version":"1.1.1","major":false,"features":[{"icon":"info","title":"Fix typo","description":"Fix typo in CSS guide."}]},{"version":"1.1.0","major":true,"features":[{"icon":"balloon-topic","title":"Add Blogs","description":"Add blog posts."}]},{"version":"1.0.6","major":false,"features":[{"icon":"info","title":"Add Pro Git book","description":"Add Pro Git book."}]},{"version":"1.0.5","major":false,"features":[{"icon":"info","title":"Source formatting","description":"Source formatting for consistency throughout website."}]},{"version":"1.0.4","major":false,"features":[{"icon":"info","title":"Update ANT_HOME path variable","description":"Update ANT_HOME path variable on Windows."}]},{"version":"1.0.3","major":false,"features":[{"icon":"info","title":"Update JDK link","description":"Changed the recommended version of JDK from 9 to 8."}]},{"version":"1.0.2","major":false,"features":[{"icon":"info","title":"Fix typo","description":"Update typo in instructions."}]},{"version":"1.0.1","major":false,"features":[{"icon":"info","title":"Fix typo","description":"Update typo in file name."}]},{"version":"1.0.0","major":true,"features":[{"icon":"info","title":"Initial changes","description":"Initial port of documentation from Social Office."}]}],"weight":4,"content":" ","srcFilePath":"src/pages/updates/index.soy","id":"updates","location":"/updates/","url":"/updates/"},"tutorials":{"title":"Tutorials","description":"Tutorials about setting up and using Liferay.","url":"/tutorials/setup/step-one.html/","weight":2,"content":" ","srcFilePath":"src/pages/tutorials/index.soy","id":"tutorials","location":"/tutorials/","customURL":true,"children":{"setup":{"title":"Setting up your Liferay on your machine","description":"Tutorial for setting up your machine to run Liferay.","tutorialTitle":"Getting started with with Liferay.","url":"/tutorials/setup/step-one.html/","content":" ","srcFilePath":"src/pages/tutorials/setup/index.soy","id":"setup","location":"/tutorials/setup/","customURL":true,"children":{"step-eight":{"title":"Step 8: Configuring Liferay's properties and settings","description":"Configuring Liferay's properties and settings.","buttonTitle":"Step 8 Complete","parentId":"setup","layout":"tutorial","weight":8,"content":" {$page.title} We need to configure settings in Liferay to get it to build and run from the source code. What is a *.properties file? The Because we are going to be overriding default properties, the easiest way to accomplish this is through a Liferay reads the *.USER_NAME.properties *.ENV_COMPUTERNAME.properties *.ENV_HOST.properties *.ENV_HOSTNAME.properties *.properties Therefore, whatever custom To find out what the default property values are and what you can override, open the default.properties file (e.g. Creating a custom Create a file called The USER_NAME is the user you login with, not your machine name. On Windows machines the default is, liferay. Edit your javac.memoryMaximumSize=1024m Edit your The path of your bundle should be outside of your cloned Liferay source code folder. Your app.server.type=tomcat app.server.parent.dir=${project.dir}/../my-custom-folder/bundles app.server.tomcat.dir=${app.server.parent.dir}/tomcat-8.0.32 Creating a portal-ext.properties file Values defined in the You will make changes within this file quite often to customize your Liferay instance. Duplicate the Rename this copied file to Open the theme.css.fast.load=false theme.css.fast.load.check.request.parameter=true theme.images.fast.load=false theme.images.fast.load.check.request.parameter=true javascript.fast.load=true javascript.log.enabled=false layout.template.cache.enabled=false combo.check.timestamp=true minifier.enabled=false openoffice.cache.enabled=false velocity.engine.resource.modification.check.interval=0 Set the When all custom configurations are complete, move the portal-ext.properties file to one folder level above the application server directory defined in the app.server.USER_NAME.properties file. (i.e. PATH/bundles).","srcFilePath":"src/pages/tutorials/setup/step-eight.md","id":"step-eight","location":"/tutorials/setup/step-eight.html","url":"/tutorials/setup/step-eight.html"},"step-eleven":{"title":"Step 11: Reviewing things you should know","description":"Take a quiz about things you should know about Liferay.","parentId":"setup","layout":"tutorial","weight":11,"content":" {$page.title} Congratulations! You have successfully setup Liferay on your machine and are able to start using it. Take the quiz Be sure you are able to answer the following questions about Liferay successfully before proceeding. What is the Terminal/Git Bash/Command Prompt? What is the difference between source code and compiled code? What is the difference between trunk and the branches in Git? Where do I find Liferay's source code? How do I update Liferay's source code? Where is my local repository? Where is my remote origin repository? Where is my remote upstream repository? What are Git remotes? How do I update my Git remote URLs? 10. Where can I find my .gitconfig file? 11. How do I update my .gitconfig file? 12. What do I need to run Liferay? 13. What is an application server? 14. What is a database? 15. What is my current instance of Liferay using for it's application server? 16. Where is my application server located? 17. What is my current instance of Liferay using for it's database? 18. What does the portal-ext.properties file do? 19. What customizations do I currently have applied to my current Liferay instance? 20. Where do you run the command ant all? 21. How do you start my Apache Tomcat? 22. How can you tell if your Liferay is running succesfully? 23. Where do you see if there are errors being thrown by Liferay? 24. How do I shut down my current instance of Liferay? 25. Can I setup Liferay succesfully again? 26. What is the normal Git workflow I should use when submitting changes? You are now ready to start developing on Liferay!","srcFilePath":"src/pages/tutorials/setup/step-eleven.md","id":"step-eleven","location":"/tutorials/setup/step-eleven.html","url":"/tutorials/setup/step-eleven.html"},"step-five":{"title":"Step 5: Understanding Git","description":"Understanding how Liferay and Git work together.","buttonTitle":"Step 5 Complete","parentId":"setup","layout":"tutorial","weight":5,"content":" {$page.title} We are going to learn how Liferay uses Git for it's source code. Since we already know how to use Git, we will focus on its usage within Liferay. Branches vs Trunk Trunk is the latest source code that is currently available. There are many branches of Liferay, so when you start working, you need to be aware of which branch you are working on and what branch you fix should be put in (6.1.x, 6.2.x, 7.0.x, master, etc). Branches are like the limbs of trunk – each branch includes some improvement over the previous branch(es), but once branched, there will not be any new improvements or functionality added. (New changes would remain in trunk until the next branch spawns). When a new branch is created, it will be similar to code in trunk, until trunk has new improvements and updates added to it. Git's repositories With Git, you have to understand three repositories: local repository The local repository is the source code that is stored on your computer. This is where you will be making all your commits to the source code before sending them to others to review. When you have made a commit that you want to submit for review, you will push it from your local repository to your remote origin repository. Make sure to keep your local repository up to date with the remote upstream repository before making any changes. remote origin repository The remote origin repository is the copy of the source code stored in your personal GitHub account. This repository should be identical to your local repository when you are sending code for review. Any code you submit for review will be sent from your local repository into your remote origin repository. remote upstream repository The remote upstream repository is the copy of the source code where all final changes and updates are stored. This is typically in Liferay's GitHub account/cloud. This only contains source code that has been reviewed, approved, and tested for everyone to begin using. Only certain people with approved access are allowed to push files into the remote upstream repository. Even though you will be working with source code, you will never actually be pushing directly to this repository; your code will go through rigorous code reviews before finally making it here. Git's workflow When working with Git, it is important to use best practices to avoid merge conflicts and rebase issues in your pull requests and code causing them to be rejected and uncommitted. Keeping master in sync Brian Chan and/or other approved committers push reviewed, tested, and approved content to the remote upstream repository. The branch most commonly used to push to is the master branch. Fetch changes from the remote upstream/master branch into your local/master branch to make sure everything is up to date with the latest changes. Run the following command to complete this action. Fetch from upstream remote git fetch upstream Merge the changes from the remote upstream/master branch into your local/master branch to make sure both branches are in sync with one another. Run the following commands to complete this action. # Checkout your master branch git checkout master # Merge changes from upstream into your local master branch git merge upstream/master We then push your local/master branch to our remote origin/master branch to make sure everything is now identical. If you notice, your local/master branch, remote origin/master branch, and remote upstream/master branch are all identical. You should never make changes to the master branch. Submitting a pull request for review To make changes and submit code for review, you should always make sure everything is in sync first. Fetch changes from the remote upstream/master branch into your local/master branch to make sure everything is up to date with the latest changes. Merge the changes from the remote upstream/master branch into your local/master branch to make sure both branches are in sync with one another. Create a new development branch based off of the local/master branch. Run the following commands to complete this action. Checkout the local master branch - you want your new branch to come from master git checkout master # Create a new branch named newfeature (give your branch its own simple informative name) git branch newfeature Checkout this new development branch as you will begin making your changes on this branch. Run the following command to complete this action. # Switch to your new branch git checkout newfeature Make your changes and commit them to this development branch. When you are ready to have your code reviewed, make sure to rebase your development branch on top of the remote upstream/master branch so merging will be simple and not have any conflicts. Run the following commands to complete this action. # Fetch upstream master and merge with your repo's master branch git fetch upstream git checkout master git merge upstream/master # If there were any new commits, rebase your development branch git checkout newfeature git rebase master Push your development branch to your remote origin repository. This will allow others to view your branch on your personal GitHub.com fork. Send a pull request to your reviewer using the GitHub.com GUI. Go to your fork on GitHub.com, select your development branch and click the pull request button. For more information about pull requests, please read About pull requests and Creating a pull request. An interactive guide about Git's workflow, can be found at https://guides.github.com/introduction/flow/. ","srcFilePath":"src/pages/tutorials/setup/step-five.md","id":"step-five","location":"/tutorials/setup/step-five.html","url":"/tutorials/setup/step-five.html"},"step-four":{"title":"Step 4: Understanding Liferay's code","description":"Making sense of Liferay's code.","buttonTitle":"Step 4 Complete","parentId":"setup","layout":"tutorial","weight":4,"content":" {$page.title} We are going to define what the difference is between all the versions of Liferay's code. Source code Source code refers to the uncompiled code – if you want to use it, you have to use commands to compile it. This version of the code is constantly being updated. This is the code that anyone could download and modify. The source branches/versions are named like: 6.0.x, 6.1.x, 6.2.x, 7.0x, etc. See Liferay's source code. Compiled code Compiled code is derived from the source code. Basically, someone had to take the source code and compile it for people to use. This code cannot be modified directly, you would need to modify the source which would have to be recompiled for use. This is the code that is delivered to users in our downloadable bundles. Liferay Bundle A Liferay bundle contains the compiled code and an application server. The bundle is what customers download and use in production environments. The bundles are named after their source versions, like: 6.0.6, 6.0.12, 6.1.0, 6.1.10, 7.0.1, etc. See Liferay's bundles. An example of all of this is like baking a cake. The source code would be the recipe for the cake. Modifying any source code would be like modifying the cake ingredients. The compiled code is the mixed, unbaked, cake batter. The bundle is the finished cake, ready to be eaten. How do you get source code? Since Liferay is an open source software, all source code is available on GitHub for download and use. For every CE version, including master, which contains the latest features, the source code is available for anyone to check out. However, for every DE version, source code is only available to Liferay's developers. Why do I need the source code? If you find a bug in Liferay, it is good practice to find out if it is also in the latest bundle version. If it exists in the latest version of that bundle version, a fix should be applied to all versions of that bundle. In order to submit any fix, you would need to get the latest source code for your respective branch and submit a fix in the source code. Once your fix gets merged into its respective branch, QA will build a bundle and test your fix. Ex. If you found a bug in 7.0.1 GA2, you should check to see if the same bug exists in 7.0.x. If it does, then you should submit your fix against 7.0.x. Once it is committed and tested by QA, it will be backported to all the older versions of 7.0.x.","srcFilePath":"src/pages/tutorials/setup/step-four.md","id":"step-four","location":"/tutorials/setup/step-four.html","url":"/tutorials/setup/step-four.html"},"step-nine":{"title":"Step 9: Compiling Liferay's source code","description":"Learn how to compile Liferay's source code.","buttonTitle":"Step 9 Complete","parentId":"setup","layout":"tutorial","weight":9,"content":" {$page.title} Now that we have Liferay setup and configured, we can start compiling the source code to get Liferay running. Getting an application server If we want to use Liferay's default setup, we need to get Apache Tomcat on our machine. Open a Terminal/Git Bash window. Navigate to the cloned Liferay source code folder. Run the command below to download Apache Tomcat. ant -f build-dist.xml unzip-tomcat This command tells ant to look in the Ant will delete preexisting folder names matching the application server directory defined in the Ant will download the version of Apache Tomcat defined in the Ant will install Apache Tomcat to the folder specified in the If this Ant task is successful, you will see a similar output as below. Buildfile: PATH/liferay-portal/build-dist.xml ... BUILD SUCCESSFUL Total time: NNN seconds Compiling the source code Now that everything is setup, we can compile Liferay's source code. Open a Terminal/Git Bash window. Navigate to the cloned Liferay' source code folder. Run the following command to setup Liferay. ant setup-sdk If this Ant task is successful, you will see a similar output as below. Buildfile: PATH/liferay-portal/build.xml ... BUILD SUCCESSFUL Total time: NNN minutes NNN seconds Compile Liferay's source code by running the following command. ant all If this Ant task is successful, you will see a similar output as below. Buildfile: PATH/liferay-portal/build.xml ... BUILD SUCCESSFUL Total time: NNN minutes NNN seconds Navigate to the Start Apache Tomcat by running the following command. OS X/Linux ./catalina.sh run Windows catalina.bat run We use catalina instead of the startup executables so that we can conveniently see the console and any errors that it may throw. Open a web browser and go to http://localhost:8080. 10. Login to Liferay using the following credentials. Username test@liferay.com Password test 11. To stop the server, go to the Terminal/Git Bash window and hit CTRL + c.","srcFilePath":"src/pages/tutorials/setup/step-nine.md","id":"step-nine","location":"/tutorials/setup/step-nine.html","url":"/tutorials/setup/step-nine.html"},"step-one":{"title":"Step 1: Installing Software","description":"Download and install software that will be used throughout the training.","buttonTitle":"Step 1 Complete","parentId":"setup","layout":"tutorial","weight":1,"content":" {$page.title} Download and install the following software. There are options listed for each category, so feel free to pick whichever you prefer. 7zip 7zip Apache Ant Apache Ant Chat/IM Client Google Hangouts Skype Slack Java JDK Java JDK 8 Git Git Text Editor Atom Brackets Notepad++ Sublime Text Vim Visual Studio Code Version Control GUI GitHub Desktop GitEye Gitg SmartGit SourceTree TortoiseGit ungit And many more... Web Browsers Chrome Firefox Internet Explorer","srcFilePath":"src/pages/tutorials/setup/step-one.md","id":"step-one","location":"/tutorials/setup/step-one.html","url":"/tutorials/setup/step-one.html"},"step-seven":{"title":"Step 7: Getting Liferay's source code","description":"Learn how to get Liferay's source code.","buttonTitle":"Step 7 Complete","parentId":"setup","layout":"tutorial","weight":7,"content":" {$page.title} We are going to get Liferay's source code from GitHub.com on to your machine. Forking a repository In order to begin making changes to source code and have it reviewed, tested, and approved, you will need to make a copy of this code locally. A fork is copying a repository on GitHub.com from it's original owner to your personal GitHub.com account. Forking a repository allows you to freely experiment with changes without affecting the original project. Most commonly, forks are used to either propose changes to someone else's project or to use someone else's project as a starting point for your own ideas. Forking Liferay Portal Forking a repository is a simple two-step process. On GitHub.com, navigate to the liferay/liferay-portal repository. In the top-right corner of the page, click Fork. Congratulations! You have now have a fork of the original liferay/liferay-portal repository in your GitHub.com account. Cloning Liferay Portal Because forking the repository only makes a copy of the code in GitHub.com, we now need to get this code locally to begin. Setup Git if you have not done so already in the previous steps. Go to your fork of the liferay-portal repository on GitHub.com. Click the Clone or download button. When connecting to a GitHub.com repository from Git, you will need to authenticate using either HTTPS (recommended) or SSH. If you clone with HTTPS, please review the following instructions. If you clone with SSH, please review the following instructions. In the dialog that appears after clicking the Clone or download button, copy the URL that you want to use for your repository. Open a Terminal/Git Bash window. Browse to the location where you would like to download this repository. We will download the repository from GitHub.com to our local machine by cloning it. Run the following command to complete this action. # Pasted URL should look something like: # SSH URL: git@github.com:brianchandotcom/liferay-portal.git # HTTPS: https://github.com/brianchandotcom/liferay-portal.git git clone PASTE URL HERE Upon completion, you should see something like the output below. Cloning into liferay-portal...remote: Counting objects: 10, done. ... remote: Compressing objects: 100% (8/8), done. remove: Total 10 (delta 1), reused 10 (delta 1) Unpacking objects: 100% (10/10), done. Congratulations! You now have a local copy of your fork of the liferay-portal repository! Configuring your remote repository URLs Now that we have have everything locally, we need to add a remote url. A remote URL is Git's fancy way of saying \"the place where your code is stored.\" That URL could be your repository on GitHub.com, or another user's fork, or even on a completely different server. Go to your newly cloned repository in Terminal/Git Bash. Check what your currently remote repositories are by running the following command below. git remote -v The output should be something similar to below if your cloned your repository. origin https://github.com/brianchandotcom/liferay-portal.git (fetch) origin https://github.com/brianchandotcom/liferay-portal.git (push) If you do not have any remote URL's listed, you will have to add a remote URL for the upstream and origin repositories. Add the upstream remote, if it is not already added, to point to the upstream repository URL. Run the following command to complete this action. Copy the upstream repository URL git remote add upstream https://github.com/liferay/liferay-portal.git If you need to add the origin remote, follow the same steps but use the origin repository URL instead of the upstream repository URL. Verify that your remote URL's are correctly pointing to the desired locations by running the following command below. git remote -v The output should be something similar to below if your cloned your repository. origin https://github.com/brianchandotcom/liferay-portal.git (fetch) origin https://github.com/brianchandotcom/liferay-portal.git (push) upstream https://github.com/liferay/liferay-portal.git (fetch) upstream https://github.com/liferay/liferay-portal.git (push) You can add as many remote URL's as you would like. Just make sure to have each one named uniquely. For more information about remotes, please read About remote repositories.","srcFilePath":"src/pages/tutorials/setup/step-seven.md","id":"step-seven","location":"/tutorials/setup/step-seven.html","url":"/tutorials/setup/step-seven.html"},"step-six":{"title":"Step 6: Setting up Git","description":"Learn how to set up Git.","buttonTitle":"Step 6 Complete","parentId":"setup","layout":"tutorial","weight":6,"content":" {$page.title} We are going to setup our Git account so we can begin development. Create an account on GitHub.com Please replace the place holders tokens in the following tutorials with the correct values (ie. FIRSTNAME, LASTNAME, etc). Create an account on Github.com using your Liferay email address (Add your Full Name to your GitHub.com public profile. Add a picture using gravatar. Be sure to use your Follow Brian Chan on GitHub.com. Optional: If you need access to any private Liferay repositories, email it-support@liferay.com with your GitHub.com username, while CC-ing your manager. Configuring .gitconfig You should have already installed Git from step 1. If you do not already have Git installed, please install it now. Add your user name to your global git config --global user.name \"FIRSTNAME LASTNAME\" Example git config --global user.name \"Brian Chan\" Add your Liferay email address ( git config --global user.email \"FIRSTNAME.LASTNAME@liferay.com\" Example git config --global user.email \"brian.chan@liferay.com\" On a windows machine, you might run into an error because Git has a limit of 4096 characters for a file name; windows has a limit of 260 characters. You will need to set longpaths to true only on a windows machine. Run the following command to complete this action. git config --global core.longpaths true `","srcFilePath":"src/pages/tutorials/setup/step-six.md","id":"step-six","location":"/tutorials/setup/step-six.html","url":"/tutorials/setup/step-six.html"},"step-ten":{"title":"Step 10: Reading the console","description":"Learn how to read and understand the console output.","buttonTitle":"Step 10 Complete","parentId":"setup","layout":"tutorial","weight":10,"content":" {$page.title} Now that we have Liferay running, we have to understand how to read the messages output by the console. Make sure Liferay is loading your Loading file:/liferay-portal/portal-ext.properties Make sure Liferay is loading the correct database as defined in your INFO localhost-startStop-1 Determine dialect for HSQL Database Engine 2.3 localhost-startStop-1 Liferay is configured to use Hypersonic as its database. Do NOT use Hypersonic in production. Hypersonic is an embedded database useful for development and demonstration purposes. The database settings can be changed in portal-ext.properties. Make sure the version of Liferay that you are using is correct by looking for a line in your console similar to the output below. Starting Liferay Community Edition Portal 7.0.4 GA5 (Wilberforce / Build 7004 / October 23, 2017) Upon startup, Liferay will automatically create a deploy folder in your bundle. When there are files placed in this folder, Liferay will automatically scan and consume any deployable packages. The location of this folder can be found by looking for a line in your console similar to the output below. localhost-startStop-1 Auto deploy scanner started for /liferay-portal/deploy Make sure Liferay has finished loading and is ready for use by looking for a line in your console similar to the output below. INFO [main] org.apache.catalina.startup.Catalina.start Server startup in NNN ms Errors in Liferay are usually prefixed with an ERROR warning message. They can be found by looking for a line in your console similar to the output below. ERROR Framework Event Dispatcher: Equinox Container: a029ce5e-e1fc-0017-1e71-df5549d2deba FrameworkEvent ERROR org.osgi.framework.BundleException: Could not resolve module: com.liferay.util.taglib [9]_ Unresolved requirement: Import-Package: javax.el_ [Sanitized] at org.eclipse.osgi.container.Module.start(Module.java:429) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1582) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1562) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1533) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1476) at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1) at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230) at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:340) `","srcFilePath":"src/pages/tutorials/setup/step-ten.md","id":"step-ten","location":"/tutorials/setup/step-ten.html","url":"/tutorials/setup/step-ten.html"},"step-three":{"title":"Step 3: What is Liferay?","description":"Explaining what Liferay is.","buttonTitle":"Step 3 Complete","parentId":"setup","layout":"tutorial","weight":3,"content":" {$page.title} It is hard to describe, because it does so much, but what we say is that it is a totally awesome content and document managing, user collaborating, socially enabling, application developing, corporate integrating, completely customizable platform for building the Internet. You are probably doubting us right now, but hopefully once you start using it, you see that it is true. Liferay provides a robust platform to build your site quickly and serve it to all clients, be they desktop, mobile, or anything in between; it provides all the standard applications you need to run on your site; and it provides an easy to use development framework for new applications or customization. In addition to this, Liferay Portal is developed using an open source methodology, by people from around the world. The code base is solid and has been proved to be reliable and stable in mission critical deployments in diverse industries. Read more about what Liferay is.. Liferay versions There are two versions of Liferay - The Community Edition (CE) and Digital Experience Platform (DXP). Liferay Digital Experience Platform, DXP, is our enterprise product and requires a subscription. It is a suite of products that work together to allow companies to digitize business operations, deliver connect customer experiences, and gather actionable customer insight. The suite includes such products as Liferay Digital Enterprise, Mobile Experience, Liferay Connected Services, Developer Tools, Liferay Sync and much more. Liferay Digital Enterprise, DE is the primary component of Liferay DXP and the enterprise equivalent of Liferay Portal CE. Enterprise subscribers are often large enterprise companies who are looking for the stability, reliability, security, and performance. Purchasing a subscription gives customers access to enterprise features/products, as well as our Subscription Services team, which provides full support, regular fixpacks/updates, emergency fixes, and security alerts/patches. Liferay Portal Community Edition, CE, is the free, open source version that is free to anyone to download and use. Updates to CE are released approximately every quarter and include fixes that had already been released to our enterprise subscribers. CE users also have access to the community versions of many of our other products, but do not have access to the subscription services. Forums and JIRA tickets are the primary ways that the community escalates and discusses issues. Read more about Liferay's DXP platform.. What is needed for Liferay? Liferay needs Java, an application server, and a database to run. Our baseline setup is to use Apache Tomcat as the application server and HSQLDB in a non-production environment, and MySQL in a production environment for the database. What is an application server? An application server is a component-based software framework that resides in the middle-tier of a server centric architecture and provides the business logic for an application program. At the core, an application server handles communications to the database on one hand and connections to the web application (Liferay) on the other. Liferay supports many of today's most popular application servers. Even better, there are already prepared and pre-configured distribution packages bundled with an application server. Application servers supported by Liferay: Red Hat JBoss Enterprise Application Platform Pivotal tcServer Apache Tomcat Oracle Weblogic IBM Websphere WildFly What is a database? A database is a collection of information that is organized so that it can be easily accessed, managed and updated. Data is organized into rows, columns and tables, and it is indexed to make it easier to find relevant information. Data gets updated, expanded and deleted as new information is added. Databases process workloads to create and update themselves, querying the data they contain and running applications against it. Databases supported by Liferay: Amazon Aurora HSQLDB IBM Db2 MariaDB MySQL Oracle Database PostgreSQL Microsoft SQL Server SAP Sybase Liferay's quick start guide If you wanted to get Liferay up and running quickly, you can follow the following steps. This is not necessary for the tutorial, but in case you wanted to see Liferay up and running quickly, you can use the bundle to get started. This does not use Liferay's source code. Install Java. We should have completed this step previous. Download a Liferay Portal CE bundle at https://www.liferay.com/downloads. Select Bundled with Tomcat and click the Download button. Extract the downloaded bundle into a folder. (e.g. Open a Terminal/Git Bash window. Navigate to the cd /liferay-portal/liferay-ce-portal-7.0-ga1/tomcat-8.0.32/bin Start tomcat. On windows run the command below. startup.bat On OS X/Linux, run the command below. ./startup.sh On windows, the server console window will open. On OS X/Linux systems, there is no output in the console window since all logs are stored in Keep watching the console until you see the following. INFO [main] org.apache.catalina.startup.Catalina.start Server startup in NNN ms Liferay Portal is now running and ready to be used. Upon startup, Liferay will automatically open your default browser to http://localhost:8080. You can sign in using username: test@liferay.com and password: test. ","srcFilePath":"src/pages/tutorials/setup/step-three.md","id":"step-three","location":"/tutorials/setup/step-three.html","url":"/tutorials/setup/step-three.html"},"step-two":{"title":"Step 2: Setting up your environment","description":"Learn how to setup your computer's environment correctly.","buttonTitle":"Step 2 Complete","parentId":"setup","layout":"tutorial","weight":2,"content":" {$page.title} Change your computer name Change your computer name to something more user friendly because we will be using this later on when configuring Liferay. Linux Launch the Terminal. Enter the contents below to check your hostname. hostname If your hostname needs to be changed, continue with the steps below. Enter the contents below to edit your hostname. sudo nano /etc/hostname Replace the contents in this file with your desired new hostname. Save and close the file. Enter the contents below to update the file that reads your hostname. sudo nano /etc/hosts Replace any occurrences of the existing computer name with the new one you entered in step 4 in this file. (Usually the line that starts with 127.0.1.1 will need to be updated). Save and close the file. Enter the contents below to reboot your system to allow the changes to take effect. sudo reboot OS X Launch System Preferences. Click on Sharing. In the Computer Name: field, enter what you want your computer name to be. Windows Right click on My Computer and choose Properties. On the Computer Name, domain, and workgroup settings section, click the Change Settings... link. Click the Change... button under the Computer Name tab. In the Computer Name: field, enter what you want your computer name to be. Change your folder options Show hidden files in the Finder/File Explorer because Liferay contains hidden files that we need to edit. Linux Hidden files in File Explorer should be visible by default. OS X Launch the Terminal. Enter the contents below. defaults write com.apple.Finder AppleShowAllFiles TRUE Relaunch the Finder to make the changes take effect. killall Finder Windows Click the Start Menu and search for Folder Explorer Options. Click on the View tab . Under the Advanced settings: section, make sure Show hidden files, folders and drives is selected. Make sure Hide extensions for known file types is unchecked. Set ANT_OPTS environment variable ANT_OPTS is an environment variable that provides a list of arguments that you want to pass to the Java Virtual Machine that will run Ant. Linux Create a .bashrc if one does not already exist. Enter the contents below into the .bashrc. export ANT_OPTS=\"-Xms2048m -Xmx4096m\" OS X Create a .bash_profile if one does not already exist. Enter the contents below into the .bash_profile. export ANT_OPTS=\"-Xms2048m -Xmx4096m\" Windows Right click on My Computer and choose Properties. Click on the Advanced system settings link. Click on the Environment Variables... button. Click on New... under the User variables section. We will be setting the ANT_OPTS environment variable. Fill out the field values with Variable name: being ANT_OPTS and Variable value: being the -Xms2048m -Xmx4096m. Click OK to save this environment variable. Setup Apache Ant Ant does almost everything for you; it uses scripts to automate tasks and compile Liferay. You should have already downloaded the Apache Ant in the previous step. This will help you install and set it up. Windows Unzip the downloaded file from the previous step into your C:\\ drive. Go to your Ant directory in the File Explorer and copy the path from the address bar. Right click on My Computer and choose Properties. Click on the Advanced system settings link. Click on the Environment Variables... button. Click on New... under the System variables section. We will be setting the ANT_HOME environment variable. Fill out the field values with Variable name: being ANT_HOME and Variable value: being the Apache Ant path you copied in step 2. Click OK to save this environment variable. Verify that the ANT_HOME variable is correct. 10. In the Environment Variables window, go to the System variables section and look for a variable called PATH and click Edit.... This variable should already exist and have values in it. 12. Do not delete this variable. At the beginning of this variable, enter the code below. We are adding our ANT_HOME variable to the PATH variable. %ANT_HOME%\\bin; 13. Open a new Command Prompt. 14. Enter the command below in the Command Prompt to make sure Ant is installed correctly. A message Buildfile: build.xml does not exist! Build failed. ant Setup Java JDK Liferay is written in Java, so you will need Java on your machine in order to have it run. You should have already downloaded the Java JDK in the previous step. This will help you install and set it up. Linux Enter the contents below to go to the jvm directory located at /usr/lib/jvm. cd /usr/lib/jvm If the jvm directory exists, skip to Step 3. Enter the contents below to create the jvm directory. mkdir -p /usr/lib/jvm Extract the downloaded Java JDK tar.gz file this the newly created jvm folder. Enter the contents below to create a symbolic link pointing to the java executable. sudo ln -s /usr/lib/jvm/JAVADIRECTORYNAME/jre/bin/java /usr/bin/java To check if Java is installed, launch the Terminal. Enter the command below in the Terminal to make sure Java is installed correctly. A message regarding your Java version should be displayed. Make sure your version displayed matches the Java JDK version you downloaded. java -version OS X Double-click the downloaded installer from the previous step. (The installer should be in .dmg format). Follow the prompts to install the Java JDK. To check if Java is installed, launch the Terminal. Enter the command below in the Terminal to make sure Java is installed correctly. A message regarding your Java version should be displayed. Make sure your version displayed matches the Java JDK version you downloaded. java -version Find the path where Java is installed on your machine by running the command below in the Terminal. A file path should return if Java is installed correctly. which java Copy the returned file path as it will be the value of the JAVA_HOME environment variable we will be setting. Create a .bash_profile if one does not already exist. Create a JAVAHOME environment variable by entering the contents below in the .bashprofile. Use the value that was returned in Step 5 as the value of the JAVA_HOME environment variable. export JAVA_HOME=\"Paste your Java file path returned in step 5 here\" Verify that the JAVA_HOME variable is correct. 10. Append this newly created JAVAHOME environment variable at the beginning of your PATH environment variable. If a PATH environment variable in your .bashprofile does not already exist, enter the contents below in the .bash_profile. export PATH=$JAVA_HOME/bin:$PATH 11. Save your .bash_profile. 12. Relaunch the Terminal. 13. Enter the command below in the Terminal to make sure your JAVAHOME environment variable is set correctly. The returned results should match what you have entered as the value for your JAVAHOME environment variable in your .bash_profile and what is returned from Step 5. echo $JAVA_HOME 13. Enter the command below in the Terminal to make sure your PATH environment variable is set correctly. The returned results should have the file path from your JAVA_HOME environment variable or the returned value from Step 5 at the beginning of your value. echo $PATH Windows Double-click the downloaded installer from the previous step. Follow the prompts to install the Java JDK. Go to your Java JDK directory in the File Explorer and copy the path from the address bar. Right click on My Computer and choose Properties. Click on the Advanced system settings link. Click on the Environment Variables... button. Click on New... under the System variables section. We will be setting the JAVA_HOME environment variable. Fill out the field values with Variable name: being JAVA_HOME and Variable value: being the Java JDK path you coped in step 3. Click OK to save this environment variable. 10. Verify that the JAVA_HOME variable is correct. 11. In the Environment Variables window, go to the System variables section and look for a variable called PATH and click Edit.... This variable should already exist and have values in it. 12. Do not delete this variable. At the beginning of this variable, enter the code below. We are adding our JAVA_HOME variable to the PATH variable. %JAVA_HOME%\\bin; 13. Open a new Command Prompt. 14. Enter the command below in the Command Prompt to make sure Java is installed correctly. A message regarding your Java version should be displayed. Make sure your version displayed matches the Java JDK version you downloaded. java -version 15. Enter the command below in the Command Prompt to check if your PATH variable is set correctly. It should list the directory of your JAVA JDK. path `","srcFilePath":"src/pages/tutorials/setup/step-two.md","id":"step-two","location":"/tutorials/setup/step-two.html","url":"/tutorials/setup/step-two.html"}},"childIds":["step-one","step-two","step-three","step-four","step-five","step-six","step-seven","step-eight","step-nine","step-ten","step-eleven"]}},"childIds":["setup"]}},"childIds":["guide","tutorials","blog","updates"]}}