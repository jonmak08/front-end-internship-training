var pageComponent=webpackJsonppageComponent([36],{264:function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var c=o(1),s=n(c),h=o(2),d=n(h);o(4),o(5),o(6),o(7),o(8),o(9),o(10),o(11),o(12),o(13),o(14),o(15);var l=o(265),m=n(l),u=function(e){function t(){return a(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(s.default);d.default.register(u,m.default),t.default=u},265:function(e,t,o){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function r(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.templates=t.wojsz=void 0;var c,s=o(1),h=n(s),d=o(2),l=n(d);goog.loadModule(function(e){function t(e,t,n){var c=function(){a("article"),a("p");var t=e.page.description;"function"==typeof t?t():null!=t&&i(t),r("p"),a("p"),i("Objective: Learn how to use the "),a("code"),i("git cherry-pick"),r("code"),i(" command, primarily associated with backporting JIRA issues."),r("p"),a("p"),i("Now that you are learning how to backport JIRA issues, that means that you have gotten some minimal experience with Git.  If you have heard some horror stories about Git, you must have heard the term "),a("em"),i("'merge conflict'"),r("em"),i(".  And if you have not run into any "),a("em"),i("merge conflicts"),r("em"),i(" yet, this is your lucky day!"),r("p"),a("p"),i("My hope is to give you a better understanding of why we use "),a("code"),i("git cherry-pick"),r("code"),i(" when backporting JIRA tickets and to help you navigate through errors you will possibly encounter when using this command."),r("p"),a("h4"),i("What does it do?"),r("h4"),a("p"),i("From what the command implies, it picks a commit(s) from another branch and applies those commit(s) to your current branch."),r("p"),a("p"),a("strong"),a("em"),i("What does that look like?"),r("em"),r("strong"),r("p"),a("p"),a("img",null,null,"src","/images/git_cherry_pick.gif","alt","alt cherrypick"),r("img"),r("p"),a("p"),i("Both branches start off with a base of "),a("strong"),i("A"),r("strong"),i(" where the left side branches off with three commits "),a("strong"),i("B"),r("strong"),i(", "),a("strong"),i("C"),r("strong"),i(", and "),a("strong"),i("D"),r("strong"),i(", in that order, and the right branch has one commit, "),a("strong"),i("E"),r("strong"),i(".  Say we want to "),a("em"),i("cherry-pick"),r("em"),i(" the commits "),a("strong"),i("B"),r("strong"),i(" and "),a("strong"),i("D"),r("strong"),i(", but not "),a("strong"),i("C"),r("strong"),i(", from the left branch and patch them onto the right branch on top of commit "),a("strong"),i("E"),r("strong"),i(".  "),a("code"),i("git cherry-pick"),r("code"),i(" easily allows us to pick and choose specific commits that we want to apply to our local branch, rather than all (and unwanted) commits.  How convenient!"),r("p"),a("h4"),i("Why do we use it?"),r("h4"),a("p"),i("In context of backporting JIRA tickets, say that you are backporting an issue (commit(s)) from Liferay's "),a("strong"),i("master"),r("strong"),i(" branch to Liferay's "),a("strong"),i("7.0.x"),r("strong"),i(" branch.  You have to apply each commit to check if the fixes work in Liferay's  "),a("strong"),i("7.0.x"),r("strong"),i(".  This is when you use "),a("code"),i("git cherry-pick <Commit ID>"),r("code"),i(" for each of those commits."),r("p"),a("pre"),a("code"),i("Note: Commit ID is a SHA-1 Hash alphanumeric code that can be either 40 characters long or 7 characters long.  The 7-character hash is the shorthand version of the 40-character hash."),r("code"),r("pre"),a("p"),i("A better question to ask is..."),r("p"),a("p"),a("strong"),a("em"),i("Why don't we directly apply the changes by copying and pasting the changes into our current branch?"),r("em"),r("strong"),r("p"),a("p"),i("Copying and pasting manually can be a tedious task.  If there are multiple files changed or files are deeply nested inside the repository, it can get very complicated and messy, especially tracking what changes have and have not been made yet.  It can also be an easy way to create unintentional bugs."),r("p"),a("p"),a("code"),i("git cherry-pick"),r("code"),i(" automates this process and does this in a quick and clean way all in one shot."),r("p"),a("p"),i("For backporting, "),a("code"),i("git cherry-pick"),r("code"),i(" is ideal because it commits changes to your current branch with the same author and commit message as used in the original commit. If a Github User ("),a("em"),i("hobbitfoLyfe"),r("em"),i(") made a commit and you applied changes "),a("em"),i("manually"),r("em"),i(" with your Github handle "),a("em"),i("shortGandalf"),r("em"),i(", this commit will be authored by you ("),a("em"),i("shortGandalf"),r("em"),i(") and not by "),a("em"),i("hobbitfoLyfe"),r("em"),i(".  So if someone has questions about the bug fix commit, they will be asking you, "),a("em"),i("shortGandalf"),r("em"),i(", and you are going to have no idea because you did not fix the original bug.  Let's leave the drama for the movies and out of backporting JIRA tickets..."),r("p"),a("h4"),i("How do you use it?"),r("h4"),a("p"),i("When you run the "),a("code"),i("git cherry-pick <Commit ID>"),r("code"),i(" command, it can go a few different ways (maybe more, but this is what I have experienced)."),r("p"),a("h6"),i("The Dream:  Do nothing"),r("h6"),s({code:"$ git cherry-pick d67142e\nwarning: inexact rename detection was skipped due to too many files.\nwarning: you may want to set your merge.renamelimit variable to at least 9190 and retry the command.\n[LPS-78835-master 782f39d44b3f] LPS-74282 Uses node 8.4.0\n Author: Chema Balsas <jose.balsas@liferay.com>\n Date: Thu Aug 31 10:16:00 2017 +0200\n 1 file changed, 5 insertions(+), 1 deletion(-)",mode:"text"},null,n),a("p"),i("This is the ideal situation.  This will fast-forward the commit because it has found the commit that you wanted to "),a("code"),i("cherry-pick"),r("code"),i(" from another branch and it causes no merge conflicts.  This means it will be committed automatically to your current branch."),r("p"),a("p"),i("If you run "),a("code"),i("git log"),r("code"),i(", you will now see that this commit is now, a part of your log with the original author and commit message.  Done!  Yay!"),r("p"),a("h6"),i("The Reality:  Merge Conflict"),r("h6"),s({code:"$ git cherry-pick 99daed2\nerror: could not apply 99daed2... commit\nhint: after resolving the conflicts, mark the corrected paths\nhint: with 'git add <paths>' or 'git rm <paths>'\nhint: and commit the result with 'git commit'",mode:"text"},null,n);a("p"),i("If there is an issue with a "),a("code"),i("cherry-pick"),r("code"),i(", it is most likely caused by a merge conflict.  This means that the changes cannot be automatically merged.  You need to go to the files that were changed by the "),a("code"),i("cherry-pick"),r("code"),i(" and it will show you something like this:"),r("p"),s({code:'<html>\n<body>\n\n<<<<<<< HEAD\n<h1>My First Heading</h1>\n=======\n<h1 class="heading">My First Heading</h1>\n>>>>>>> 99daed2\n\n<p>My first paragraph.</p>\n\n</body>\n</html>',mode:"text"},null,n),a("p"),i("Note: Merge conflicts often occur because the change you are applying has been altered by other changes, so the base changes in the file you are trying to change are no longer the same."),r("p"),a("p"),i("Between "),a("code"),i("<<<<<<< HEAD"),r("code"),i(" and "),a("code"),i("======="),r("code"),i(" is the original code and between "),a("code"),i("======="),r("code"),i(" and "),a("code"),i("<<<<<<< 99daed2"),r("code"),i(" (commit ID) is the "),a("code"),i("cherry-pick"),r("code"),i("ed code."),r("p"),a("p"),a("strong"),a("em"),i("Action:"),r("em"),r("strong"),i(" You will need to resolve the merge conflict before continuing, by merging the desired changes from the "),a("code"),i("cherry-pick"),r("code"),i(" and the appropriate changes from the current file.  Most of the time, it is as easy as removing all the conflict markers (i.e. "),a("code"),i("<<<<<< HEAD"),r("code"),i(") and the HEAD content.  Once removed, it should look something like this:"),r("p"),s({code:'<html>\n<body>\n\n<h1 class="heading">My First Heading</h1>\n\n<p>My first paragraph.</p>\n\n</body>\n</html>',mode:"text"},null,n),a("p"),i("Other times, Git does not interpret differences correctly so the best practice is to always check the "),a("code"),i("cherry-pick"),r("code"),i("ed commit in Git and check what was actually changed.  Then remove all conflict markers and the content of the cherry-picked commit (i.e. lines between "),a("code"),i("======="),r("code"),i(" and "),a("code"),i("<<<<<< 99daed2"),r("code"),i(")."),r("p"),s({code:"<html>\n<body>\n\n<h1>My First Heading</h1> \x3c!-- manually add 'class=\"heading\"' --\x3e\n\n<p>My first paragraph.</p>\n\n</body>\n</html>",mode:"text"},null,n),a("p"),i("Starting off with the content that you had originally ("),a("em"),i("HEAD"),r("em"),i("), make the changes in your local files manually and save.  Most importantly, you must commit the resolution of the merge conflict by staging as usual ("),a("code"),i("git add"),r("code"),i(") and commit using the "),a("code"),i("--allow-empty"),r("code"),i(" flag to keep original author and commit message ("),a("code"),i("git commit --allow-empty"),r("code"),i(").  This concludes the merge conflict and cherry pick!  Go ahead and test out your changes!"),r("p"),a("h6"),i("The Other Reality: Commit is not found"),r("h6"),s({code:"$ git cherry-pick 56035ad\nfatal: bad revision '56035ad'\n\n$ git cherry-pick 68ce5127bbb3a1e5dbef11b150625e6c05e6d427\nfatal: bad object 68ce5127bbb3a1e5dbef11b150625e6c05e6d427",mode:"text"},null,n),a("p"),i("You may get this error because the commit has not been fetched from your remote yet or, plainly, the commit is not found in your local repository.  Make sure you fetch the latest changes from your upstream and try again!"),r("p"),r("article"),a("input",null,null,"type","hidden","value",e.page.title),r("input"),a("input",null,null,"type","hidden","value",e.site.title),r("input")};h(o.$$assignDefaults({content:c},e),null,n)}goog.module("wojsz.incrementaldom");var o=goog.require("soy");goog.require("soydata");goog.require("goog.asserts"),goog.require("soy.asserts"),goog.require("goog.i18n.bidi"),goog.require("goog.string");var n=goog.require("incrementaldom"),a=n.elementOpen,r=n.elementClose,i=(n.elementVoid,n.elementOpenStart,n.elementOpenEnd,n.text),s=(n.attr,l.default.getTemplate("ElectricCode.incrementaldom","render")),h=l.default.getTemplate("blog.incrementaldom","render");return e.render=t,goog.DEBUG&&(t.soyTemplateName="wojsz.render"),e.render.params=["page","site"],e.render.types={page:"?",site:"?"},e.templates=c=e,e});var m=function(e){function t(){return a(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),t}(h.default);l.default.register(m,c),t.wojsz=m,t.templates=c,t.default=c}},[264]);